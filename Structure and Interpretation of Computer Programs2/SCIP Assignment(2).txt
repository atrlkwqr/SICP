1.

#lang racket

(define (integral func num-steps x y) (if (= num-steps 0)
                                    0
                                    (+ (* (/ (- y x) num-steps) (func x)) (integral func (- num-steps 1) (+ x (/ (- y x) num-steps)) y))))

;; func를 받아 x에서 y까지 num-steps만큼 나누고 적분합니다.
;; 사각형의 넓이를 구할 때마다 num-steps의 값을 1씩 감소시키며 x의 값을 y와 x의 차를 num-steps로 나눈 만큼 더해주고 이를 재귀시킵니다.
;; num-steps의 값은 계속 줄어들지만 그에 따라 x의 값도 계속 늘어나기 때문에 적분 넓이를 구할 수 있습니다.

;; ex) (integral (lambda (x) (+ (expt x 2) 3)) 1 5 7) = (5^2 + 3) * 2 = 56
;; ex) (integral (lambda (x) (+ (expt x 2) 3)) 2 5 7) = (5^2 + 3) + (6^2 + 3) = 67

 
2.

#lang racket


(define (approx-pi num-steps)
            
                    (do ((a (-  num-steps 1) (- a 1))
                         
                    (total 0))
                      
                    ((< a 0) total)
                      
                    (set! total (+ total (* 4 (* (sqrt (- 1 (expt (/ a  num-steps) 2))) (/ 1  num-steps)))))))

;; do 반복문으로 반복문을 만듭니다.
;; do 반복문 안에서는 (num-steps - 1)을 a라 하고 a를 1씩 감소시킵니다. total을 0으로 초기화한 후 a가 음수가 될 때 까지 넓이를 total에 더해주는 것을 반복합니다.
;; 반복적으로 더해줄 넓이는 주어진 식을 num-steps만큼 나눠서 적분해서 더할 사각형들입니다.
;; 식을 통해 구해준 넓이는 1사분면의 넓이이기 때문에 4를 곱함으로써 π(파이)에 가까운 값을 도출합니다.
;; num-steps의 값이 커질 수록 낭비되는 넓이가 작아지고 π(파이)에 수렴합니다.


;; ex) (approx-pi 10) = 3.3045183262483184
;; ex) (approx-pi 1000) = 3.143555466911027

3.

#lang racket


(define (rectangle func x1 x2) (func x1))  ; func를 받아 사각형을 구하는 정의입니다.

(define (trapezoid func x1 x2) ( / (+ (func x1) (func (+ x1 1))) 2))  ; func를 받아 사다리꼴을 구하는 정의입니다.

(define (integral-with piece func num-steps x1 x2) (if (= num-steps 0)
                                                       0
                                                       (cond ((eq? piece rectangle)
                                                       (+ (* (/ (- x2 x1) num-steps) (func x1)) (integral-with rectangle func (- num-steps 1) (+ x1 (/ (- x2 x1) num-steps)) x2)))
                                                        ((eq? piece trapezoid)
                                                         (+ (+ (func x1) (func (+ x1 (/ (- x2 x1) num-steps)))) (integral-with rectangle func (- num-steps 1) (+ x1 (/ (- x2 x1) num-steps)) x2))))))

;; piece에 rectangle 또는 trapezoid를 넣어 사각형 또는 사다리꼴을 이용해 사용자가 원하는 방식으로 값을 도출할 수 있도록 합니다.
;; 재귀적으로 도형의 넓이를 구해 더해줍니다.


;; ex) (integral-with rectangle (lambda (x) (+ (expt x 2) 3)) 1 5 7) = (2 * ( 5^2 + 3)) = 56
;; ex) (integral-with trapezoid (lambda (x) (+ (expt x 2) 3)) 1 5 7) = ((func(5) + func(7))) * 2 / 2 = (28 + 52) = 80

4.

#lang racket

(define (better-pi num-steps)
            
                    (do ((a (-  num-steps 1) (- a 1))
                         
                    (total 0))
                      
                    ((< a 0) total)
                      
                    (set! total (+ total (* 4  (/ (* (+ (sqrt (- 1 (expt (/ a num-steps) 2))) (sqrt (- 1 (expt (+ (/ 1 num-steps) (/ a num-steps)) 2)))) (/ 1 num-steps)) 2))))))


;; 사각형을 이용하는 것보다 사다리꼴을 이용하는 것이 더 approximation하기 때문에 사다리꼴을 이용해 과제 2번에서 만들었던 프로그램보다 더 나은 프로그램을 만듭니다.
;; 재귀를 사용하지 않고 do반복문을 사용합니다. num-steps만큼 나눠지는 사다리꼴을 total에 다 더해줍니다.


;; ex) (better-pi 10) = 3.1045183262483187
;; ex) (better-pi 100) = 3.140417031779046
;; ex) (better-pi 1000) = 3.1415554669110293

5.

#lang racket

(define (deriv-variable wrt var) (if (and (symbol? wrt) (symbol? var) (eq? wrt var))
                                     1
                                     0))

;; wrt와 var이라는 변수에 심볼이 입력되있는지 확인합니다. 둘 다 심볼로 입력되있다면 같은지 확인하고 같다면 1 아니라면 0을 출력합니다.


;; ex) (deriv-variable 'x 'x) = 1
;; ex) (deriv-variable 'x 'y) = 0


6.

#lang racket

(define (derivative wrt expr) (cond ((number? expr) 0)
                                    
                                    ((symbol? expr)
                                     (if (and (symbol? wrt) (eq? wrt expr))
                                              1
                                              0))
                                    
                                     (else (error "Don't know how to differentiate" expr))))

;; 두 번째 parameter(expr)를 첫 번째 parameter(wrt)로 미분하는 프로그램을 작성합니다.
;; cond 명령어로 여러가지 조건을 세웁니다.
;; 두 번째 받은 parameter(expr)가 숫자이면 0을 출력합니다.
;; 두 번째 받은 parameter(expr)가 심볼이라면 첫 번째 parameter(wrt)가 심볼이고 wrt와 expr가 포인터가 같다면 1, 아니라면 0을 출력합니다.
;; 위의 조건들 중 하나도 충족하지 못한다면 ["Don't know how to differentiate" expr] 메세지를 띄웁니다.


;; ex) (derivative 'x 3) = 0
;; ex) (derivative 'x 'x) = 1
;; ex) (derivative 'x '(+ x 3)) = Don't know how to differentiate (+ x 3)

 7.

#lang racket


(define (derivative wrt expr)
  (cond ((number? expr) 0)
        
        ((symbol? expr)
         (if (same-variable? wrt expr) 1 0))
        
        ((sum? expr)
         (make-sum (derivative wrt (cadr expr))
                   (derivative wrt (caddr expr))))
        
        (else
         (error "Don't know how to differentiate" expr))))
 
(define (same-variable? v1 v2)
  (and (symbol? v1) (symbol? v2) (eq? v1 v2)))
 
(define (make-sum a1 a2) (list '+ a1 a2))
 
(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))

;; 첫 번째 parameter(wrt)가 두 번째 parameter(expr)과 같다면 1 아니라면 0을 출력합니다.
;; expr가 pair인지 첫 번째 인자가 '+' 기호인지 확인하고 맞다면 (+ a1 a2)로 만듭니다.
;; a1은 첫 번째 parameter(wrt)의 cadr [cdr -> car]을 a2는 caddr [cdr -> cdr -> car]입니다.
;; a1과 a2는 재귀를 합니다.


;; ex) (derivative 'x '(+ x 2)) = '(+ 1 0)
;; ex) (derivative 'x '(+ x 5)) = '(+ 1 0)

8.
 
#lang racket

(define (derivative wrt expr)
  (cond ((number? expr) 0)
        
        ((symbol? expr)
         (if (same-variable? wrt expr) 1 0))
        
        ((sum? expr)
         (make-sum (derivative wrt (cadr expr))
                   (derivative wrt (caddr expr))))

        ((product? expr)
         (make-sum
           (make-product (cadr expr)
                         (derivative wrt (caddr expr)))
           (make-product (derivative wrt (cadr expr))
                         (caddr expr))))
        
         (else (error "Don't know how to differentiate" expr))))

(define (same-variable? v1 v2)
  (and (symbol? v1) (symbol? v2) (eq? v1 v2)))
 
(define (make-sum a1 a2) (list '+ a1 a2))
 
(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))


(define (make-product b1 b2) (list '* b1 b2))

(define (product? x)
  (and (pair? x) (eq? (car x) '*)))


;; 곱하기 옵션을 추가시킵니다.
;; expr가 pair인지 첫 번째 인자가 '*' 기호인지 확인하고 맞다면 (* b1 b2)로 만듭니다.
;; expr의 caddr을 미분시켜서 m1식을 만들고 expr의 cadr을 미분시켜서 m2식을 만듭니다. 그리고 m1과 m2를 더해주는 식을 만듭니다.


;; ex) (derivative 'x '(* x 3)) = '(+ (* x 0) (* 1 3))
;; ex) (derivative 'x '(+ (* x 5) 1)) = '(+ (+ (* x 0) (* 1 5)) 0)

9.

#lang racket

(define (derivative wrt expr)
  (cond ((number? expr) 0)
        
        ((symbol? expr)
         (if (same-variable? wrt expr) 1 0))
        
        ((sum? expr)
         (make-sum (derivative wrt (cadr expr))
                   (derivative wrt (caddr expr))))

        ((product? expr)
         (make-sum
           (make-product (cadr expr)
                         (derivative wrt (caddr expr)))
           (make-product (derivative wrt (cadr expr))
                         (caddr expr))))
        
         (else (error "Don't know how to differentiate" expr))))

(define (same-variable? v1 v2)
  (and (symbol? v1) (symbol? v2) (eq? v1 v2)))
 
(define (make-sum a1 a2) (list '+ a1 a2))
 
(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))


(define (make-product b1 b2) (list '* b1 b2))

(define (product? x)
  (and (pair? x) (eq? (car x) '*)))

;; 9번은 추가적인 test case를 적는 문제입니다.


;; ex) (derivative 'x '(* x 6)) = '(+ (* x 0) (* 1 6))
;; ex) (derivative 'x '(+ (* x 2) 2)) = '(+ (+ (* x 0) (* 1 2)) 0)
;; ex) (derivative 'x '(+ (+ (* x 6) 7) 5)) = '(+ (+ (+ (* x 0) (* 1 6)) 0) 0)
;; ex) (derivative 'x '(+ (* (* x 6) 2) 1)) = '(+ (+ (* (* x 6) 0) (* (+ (* x 0) (* 1 6)) 2)) 0)
;; ex) (derivative 'x '(*(* (* x 6) 7) 5)) = '(+ (* (* (* x 6) 7) 0) (* (+ (* (* x 6) 0) (* (+ (* x 0) (* 1 6)) 7)) 5))
;; ex) (derivative 'x '(+(*(* (* x 6) 7) 5) 1)) = '(+ (+ (* (* (* x 6) 7) 0) (* (+ (* (* x 6) 0) (* (+ (* x 0) (* 1 6)) 7)) 5)) 0)
;; ex) (derivative 'x '(- (* x 6) 4)) = Don't know how to differentiate (- (* x 6) 4)
;; ex) (derivative 'x '(+ (expt x 2) 4)) = Don't know how to differentiate (expt x 2)
;; ex) (derivative 'x '(/ (* x 3) 4)) = Don't know how to differentiate (/ (* x 3) 4)

optional problem.

#lang racket


(define (derivative wrt expr)
  (cond ((number? expr) 0)
        
        ((symbol? expr)
         (if (same-variable? wrt expr) 1 0))
        
        ((sum? expr)
         (make-sum (derivative wrt (cadr expr))
                   (derivative wrt (caddr expr))))

        ((product? expr)
         (make-sum
           (make-product (cadr expr)
                         (derivative wrt (caddr expr)))
           (make-product (derivative wrt (cadr expr))
                         (caddr expr))))

        ((substract? expr)
         (make-substract (derivative wrt (cadr expr))
                   (derivative wrt (caddr expr))))
        
         (else (error "Don't know how to differentiate" expr))))


(define (same-variable? v1 v2)
  (and (symbol? v1) (symbol? v2) (eq? v1 v2)))
 
(define (make-sum a1 a2) (list '+ a1 a2))
 
(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))


(define (make-product b1 b2) (list '* b1 b2))

(define (product? x)
  (and (pair? x) (eq? (car x) '*)))

(define (make-substract a1 a2) (list '- a1 a2))

(define (substract? x)
  (and (pair? x) (eq? (car x) '-)))



;;optional problem
;;빼기 옵션 추가했습니다.


;; ex) (derivative 'x '(- (* x 6) 4)) =  '(- (+ (* x 0) (* 1 6)) 0)
;; ex) (derivative 'x '(- (- (* x 6) 4) 2)) = '(- (- (+ (* x 0) (* 1 6)) 0) 0)
;; ex) (derivative 'y '(- (* y 3) 7)) = '(- (+ (* y 0) (* 1 3)) 0)
;; ex) (derivative 'y '(- (- (* y 2) 1) 4)) = '(- (- (+ (* y 0) (* 1 2)) 0) 0)
;; ex) (derivative 'z '(- (* z 1) 1)) = '(- (+ (* z 0) (* 1 1)) 0)
;; ex) (derivative 'z '(- (* (* z 8) z) 6)) = '(- (+ (* (* z 8) 1) (* (+ (* z 0) (* 1 8)) z)) 0)



